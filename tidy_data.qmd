---
title: "tidyverseの<br />データ処理"
subtitle: "Kanazawa.R #1"
date: 2024-06-29
author: "伊東宏樹"
lang: ja
format:
  revealjs:
    theme: [dark, custom.scss]
    code-copy: true
    template-partials:
      - title-slide.html
    fig-width: 5
    fig-height: 3
execute:
  echo: true
slide-number: true
editor: visual
embed-resources: true
---

## 内容

-   Tidy data（整然データ）とは

-   tidyverseの紹介

    -   tidyr

    -   dplyr

-   参考情報

## Tidy data（整然データ）

### Tidy dataの4条件[^1]

[^1]: <https://id.fnshr.info/2017/01/09/tidy-data-intro/>

-   個々の変数が1つの列をなす
-   個々の観測が1つの行をなす
-   個々の観測の構成単位の類型が1つの表をなす
-   個々の値が1つのセルをなす

## Tidyでないデータ(messy data; 雑然データ）

### 例[^2]

[^2]: 引用元 <https://id.fnshr.info/2017/01/09/tidy-data-intro/> 西原史暁, 2017, CC-BY

| 地点 | 6時 | 12時 | 18時 |
|------|:---:|:----:|:----:|
| 札幌 |  ☀  |  ☀   |  ☁   |
| 東京 |  ☁  |  ☂   |  ☂   |
| 福岡 |  ☂  |  ☀   |  ☀   |

## Tidyなデータ（整然データ）

::: {style="font-size: 90%;"}
| 地点 | 時刻 | 天気 |
|------|:----:|:----:|
| 札幌 | 6時  |  ☀   |
| 札幌 | 12時 |  ☀   |
| 札幌 | 18時 |  ☁   |
| 東京 | 6時  |  ☁   |
| 東京 | 12時 |  ☂   |
| 東京 | 18時 |  ☂   |
| 福岡 | 6時  |  ☂   |
| 福岡 | 12時 |  ☀   |
| 福岡 | 18時 |  ☀   |
:::

## 現実にはtidyでないデータが多い

![](images/messy_data.png)

[<https://housyasen.env.go.jp/csv/181_AB_01s_2009.csv>]{style="font-size: 60%;"}

## データサイエンスのプロセス

![](images/base.png)

::: {style="text-align: right; font-size: 60%;"}
(Wickham H. et al. (2023) [R for Data Science (2nd ed.)より](https://r4ds.hadley.nz/intro#fig-ds-diagram), CC-BY-NC-ND 3.0)
:::

## [tidyverse](https://tidyverse.tidyverse.org)

データサイエンスの処理に一貫性をもって使えるパッケージ群、あるいはそのコアとなるパッケージを集めたメタパッケージ

```{r}
#| label: tidyverse
#| message: true

library(tidyverse)
```

## tidyr

-   データの変形

-   tidy化

## Tidy化の例

例題データ: 世界銀行による各国の人口データ

```{r}
#| label: data

data(world_bank_pop)
head(world_bank_pop)
```

## こうしたい

::: {style="font-size: 66%;"}
| country | year | [SP.URB.TOTL]{style="font-size: 80%;"} | [SP.URB.GROW]{style="font-size: 80%;"} | [SP.POP.TOTL]{style="font-size: 80%;"} | [SP.POP.GROW]{style="font-size: 80%;"} |
|------------|-----------:|-----------:|-----------:|-----------:|-----------:|
| ABW     | 2000 |                                  41625 |                                   1.66 |                                  89101 |                                   2.54 |
| ABW     | 2001 |                                  42025 |                                  0.956 |                                  90691 |                                   1.77 |
|   :     |  :   |                                    :   |                                    :   |                                    :   |                                    :   |
| ABW     | 2017 |                                  45648 |                                  0.772 |                                 105439 |                                  0.537 |
| AFE     | 2000 |                              115551653 |                                   3.60 |                              401600588 |                                   2.58 |
|   :     |  :   |                                    :   |                                    :   |                                    :   |                                    :   |
| ZWE     | 2017 |                                4755312 |                                   1.86 |                               14751101 |                                   2.04 |
:::

## pivot_longer

各年のデータを縦に

```{r}
#| label: pivot_longer

pop_long <- world_bank_pop |>
  pivot_longer(cols = `2000`:`2017`, names_to = "year")
head(pop_long)
```

## pivot_wider

データ項目を横に

```{r}
#| label: pivot_wider

pop_tidy <- pop_long |>
  pivot_wider(names_from = indicator)
head(pop_tidy)
```

## dplyr

データの集計・抽出・並べ替えなど

::: {style="margin-top: 1em; font-size: 125%;"}
以下、dplyrパッケージの主要な関数を紹介します
:::

## mutate

既存の列から新しい列をつくる

```{r}
#| label: mutate

pop_tidy |>
  mutate(pop_non_urb = SP.POP.TOTL - SP.URB.TOTL) |>
  head(6)
```

## filter

条件にあう行を抽出する

```{r}
#| label: filter

pop_tidy |>
  filter(year == 2017, SP.POP.TOTL >= 1e+8)
```

## select

特定の列を抽出する

```{r}
#| label: select

pop_tidy |>
  select(country, year, SP.POP.TOTL) |>
  head(6)
```

## arrange

行を並べ替える

```{r}
#| label: arrange

pop_tidy |>
  arrange(desc(SP.POP.TOTL)) |>
  head(6)
```

## summarise

集計する

```{r}
#| label: summarise

pop_tidy |>
  group_by(country) |>
  summarise(mean_pop = mean(SP.POP.TOTL))
```

## その他、よくつかう関数

-   `bind_rows`: データセットを縦につなげる

-   `bind_cols`: データセットを横につなげる

-   `*_join`: 2つのデータセットをキー列を参照して結合する

    -   `inner_join`, `left_join`, `right_join`, `full_join`, ...

## さらに知るには

-   [R for Data Science, 2nd ed.](https://r4ds.hadley.nz)

    -   Hadley Wickham, Mine Çetinkaya-Rundel, Garrett Grolemund (著)
    -   オンライン版は無料（英語）

-   Heavy Watal （岩嵜 航さん）

    -   [tidyr — シンプルなデータ変形ツール](https://heavywatal.github.io/rstats/tidyr.html)
    -   [dplyr — 高速data.frame処理](https://heavywatal.github.io/rstats/dplyr.html)

-   [［改訂第2版］RユーザーのためのRStudio［実践］入門](https://gihyo.jp/book/2021/978-4-297-12170-9)

    -   松村優哉・湯谷啓明・紀ノ定保礼・前田和寛 (著), 技術評論社
